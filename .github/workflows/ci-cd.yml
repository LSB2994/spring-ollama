name: Spring Ollama CI/CD Pipeline

on:
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'

env:
  JAVA_VERSION: '21'
  APP_NAME: "spring-ollama"
  BACKUP_DIR: "/home/lsb/backups"
  MAX_BACKUPS: 5
  SERVER_HOST: "172.27.184.67"
  DEPLOY_DIR: "/home/lsb/app"
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_TO }}

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Send deployment start notification
        shell: pwsh
        run: |
          $BRANCH = $env:GITHUB_REF -replace 'refs/heads/',''
          $COMMIT_MSG = git log -1 --pretty=%B
          $COMMIT_AUTHOR = git log -1 --pretty=%an
          $BUILD_URL = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          $env:TZ = "Asia/Phnom_Penh"

          $MESSAGE = "üöÄ *Spring Ollama DEPLOYMENT STARTED*%0A%0A"
          $MESSAGE += "*Branch:* ``$BRANCH``%0A"
          $MESSAGE += "*Commit:* ``$COMMIT_MSG``%0A"
          $MESSAGE += "*Author:* $COMMIT_AUTHOR%0A"
          $MESSAGE += "*Build:* [View Details]($BUILD_URL)%0A"
          $MESSAGE += "*Started at:* $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')%0A%0A"
          $MESSAGE += "_Deployment in progress..._"

          curl.exe -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" `
               -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" `
               -d "text=$MESSAGE" `
               -d "parse_mode=Markdown" `
               -d "disable_web_page_preview=true"

      - name: Set up environment
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-${{ env.JAVA_VERSION }}-openjdk-amd64" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      - name: Build application
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

      - name: Find JAR file
        id: find-jar
        run: |
          JAR_FILE=$(find $GITHUB_WORKSPACE/build/libs -name "*.jar" | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "::error::No JAR file found in build/libs directory"
            exit 1
          fi
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          VERSION=$(echo $JAR_FILE | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Backup existing deployment
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            mkdir -p $BACKUP_DIR
            if [ -f $DEPLOY_DIR/$APP_NAME.jar ]; then
              cp $DEPLOY_DIR/$APP_NAME.jar $BACKUP_DIR/$APP_NAME_$TIMESTAMP.jar
              echo 'Backup created'
            else
              echo 'No existing JAR to backup'
            fi
          "

      - name: Deploy JAR
        run: |
          scp -i ~/.ssh/id_rsa ${{ steps.find-jar.outputs.jar_file }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEPLOY_DIR/$APP_NAME.jar
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            sudo systemctl stop $APP_NAME || true
            sudo systemctl start $APP_NAME
          "

      - name: Verify deployment
        id: verify
        run: |
          HEALTH_URL="http://$SERVER_HOST:8080/actuator/health"
          for i in {1..10}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
            if [ "$RESPONSE" -eq 200 ]; then
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Send success notification
        if: success() && steps.verify.outputs.success == 'true'
        run: |
          export TZ="Asia/Phnom_Penh"
          VERSION="${{ steps.find-jar.outputs.version }}"
          DEPLOY_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          APP_URL="http://${SERVER_HOST}:8080"
          
          MESSAGE="‚úÖ *Spring Ollama DEPLOYMENT SUCCESSFUL*%0A%0A"
          MESSAGE+="*Version:* \`${VERSION}\`%0A"
          MESSAGE+="*Deployed at:* ${DEPLOY_TIME}%0A"
          MESSAGE+="*Application URL:* [Open App](${APP_URL})%0A"
          
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

      - name: Rollback on failure
        if: (failure() || steps.verify.outputs.success == 'false')
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            sudo systemctl stop $APP_NAME || true
            cp $BACKUP_DIR/$APP_NAME_$TIMESTAMP.jar $DEPLOY_DIR/$APP_NAME.jar
            sudo systemctl start $APP_NAME
          "
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text='‚ùå Deployment failed - Rolled back to previous version'" \
            -d "parse_mode=Markdown"

  cleanup:
    runs-on: self-hosted
    needs: build-and-deploy
    if: always()
    steps:
      - name: Cleanup old backups
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            ls -1t $BACKUP_DIR/$APP_NAME_*.jar | tail -n +$((MAX_BACKUPS+1)) | xargs rm -f
          "