#name: LLAMA & DEPLOY
#
#on:
#  push:
#    branches:
#      - develop
#
#jobs:
#  build-deploy:
#    name: Build & Deploy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Setup JDK 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: 21
#
#      - name: Unit Tests
#        run: |
#          chmod +x ./gradlew
#          ./gradlew clean bootJar --info
#
name: LLAMA DEPLOY

on:
  push:
    branches: [develop]

env:
  APP_NAME: "spring-ollama"
  SERVER_HOST: "172.27.184.67"
  DEPLOY_DIR: "/home/lsb/deployments"
  BACKUP_DIR: "/home/lsb/backups"
  MAX_BACKUPS: 5

jobs:
  build-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar --info
          # Verify JAR location
          find . -name "*.jar" -type f

      - name: Locate JAR file
        id: find-jar
        run: |
          JAR_PATH=$(find $GITHUB_WORKSPACE -path "*/build/libs/*.jar" | head -1)
          if [ -z "$JAR_PATH" ]; then
            echo "::error::No JAR file found!"
            exit 1
          fi
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "JAR found at: $JAR_PATH"

      - name: Setup SSH
        uses: web factory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH Connection
        run: ssh -o StrictHostKeyChecking=no lsb@${{ env.SERVER_HOST }} "echo 'SSH successful!'"

      - name: Deploy to Server
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Backup existing JAR
          ssh lsb@${{ env.SERVER_HOST }} "
            mkdir -p ${{ env.BACKUP_DIR }}
            if [ -f ${{ env.DEPLOY_DIR }}/${{ env.APP_NAME }}.jar ]; then
              cp ${{ env.DEPLOY_DIR }}/${{ env.APP_NAME }}.jar ${{ env.BACKUP_DIR }}/${{ env.APP_NAME }}_$TIMESTAMP.jar
              echo 'Backup created'
            fi
          "
          
          # Deploy new JAR
          scp ${{ steps.find-jar.outputs.jar_path }} lsb@${{ env.SERVER_HOST }}:${{ env.DEPLOY_DIR }}/${{ env.APP_NAME }}.jar
          
          # Restart application
          ssh lsb@${{ env.SERVER_HOST }} "
            pkill -f ${{ env.APP_NAME }} || true
            nohup /usr/lib/jvm/java-21-openjdk-amd64/bin/java -jar ${{ env.DEPLOY_DIR }}/${{ env.APP_NAME }}.jar > ${{ env.DEPLOY_DIR }}/app.log 2>&1 &
            disown
          "

      - name: Verify Deployment
        run: |
          echo "Waiting for app to start..."
          sleep 30
          
          HEALTH_URL="https://${{ env.SERVER_HOST }}:8080/actuator/health"
          for i in {1..6}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
            [ "$STATUS" -eq 200 ] && echo "âœ… App is healthy" && exit 0
            sleep 10
          done
          echo "::error::Deployment failed - Health check timeout"
          exit 1