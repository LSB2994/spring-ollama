name: LLAMA CI/CD Pipeline

on:
  push:
    branches:
      - develop  # Trigger on pushes to the 'develop' branch
    paths-ignore:
      - '**.md'  # Ignore markdown files
      - '.gitignore'
      - 'docs/**'  # Ignore docs folder

env:
  JAVA_VERSION: '21'
  APP_NAME: "spring-ollama"
  BACKUP_DIR: "/home/kosign/backups/tomcat"  # Backup directory for JAR files
  MAX_BACKUPS: 5  # Max number of backups to retain
  SERVER_HOST: "172.27.184.67"  # IP address of the remote server
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  # Telegram bot token for notifications
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_TO }}  # Chat ID for Telegram notifications

jobs:
  build-and-deploy:
    runs-on: self-hosted  # Use a self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checkout the repository code

      - name: Send deployment start notification
        run: |
          $Branch = $Env:GITHUB_REF -replace 'refs/heads/', ''
          $CommitMsg = git log -1 --pretty=%B
          $CommitAuthor = git log -1 --pretty=%an
          $BuildUrl = "${Env:GITHUB_SERVER_URL}/${Env:GITHUB_REPOSITORY}/actions/runs/${Env:GITHUB_RUN_ID}"
          $Env:TZ="Asia/Phnom_Penh"

          $Message = "🚀 *HRMS DEPLOYMENT STARTED*%0A%0A"
          $Message += "*Branch:* `{$Branch}`%0A"
          $Message += "*Commit:* `{$CommitMsg}`%0A"
          $Message += "*Author:* {$CommitAuthor}%0A"
          $Message += "*Build:* [View Details]({$BuildUrl})%0A"
          $Message += "*Started at:* $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')%0A%0A"
          $Message += "_Deployment in progress..._"

          Invoke-RestMethod -Uri "https://api.telegram.org/bot${Env:TELEGRAM_TOKEN}/sendMessage" -Method Post -Body @{
              chat_id = $Env:TELEGRAM_CHAT_ID
              text = $Message
              parse_mode = "Markdown"
              disable_web_page_preview = $true
          }
          

      - name: Set up environment (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "JAVA_HOME=/usr/lib/java-${{ env.JAVA_VERSION }}-openjdk-amd64/bin/java" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

#      - name: Set up environment (Windows)
#        if: runner.os == 'Windows'
#        shell: powershell
#        run: |
#          echo "JAVA_HOME=/usr/lib/jvm/java-${{ env.JAVA_VERSION }}-openjdk-amd64" >> $GITHUB_ENV
#          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
#          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

      - name: Build application
        run: |
          ./gradlew build

      - name: Build Test
        run: ./gradlew test
#          chmod +x ./gradlew
#          ./gradlew build -x test

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v3
        with:
            name: app-jar
            path: build/libs/*.jar

      - name: Create backup directory
        run: |
          mkdir -p $BACKUP_DIR
          echo "Created backup directory at $BACKUP_DIR"

      - name: Backup existing deployment
        run: |
          if [ -f "$BACKUP_DIR/$APP_NAME.jar" ]; then
            BACKUP_FILE="$BACKUP_DIR/${APP_NAME}_backup_$TIMESTAMP.jar"
            sudo /bin/cp "$BACKUP_DIR/$APP_NAME.jar" "$BACKUP_FILE"
            echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT
            echo "has_backup=true" >> $GITHUB_OUTPUT
            echo "Backed up current JAR to $BACKUP_FILE"
          else
            echo "No existing JAR file to backup"
            echo "has_backup=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Server (JAR)
        run: |
          ssh lsb@${{ env.SERVER_HOST }} "mkdir -p /home/lsb/deployments"  # Ensure deployment directory exists
          ssh lsb@${{ env.SERVER_HOST }} "pkill -f spring-ollama || true"  # Stop the application if it's running
          scp ${{ steps.find-jar.outputs.jar_file }} lsb@${{ env.SERVER_HOST }}:/home/lsb/deployments/spring-ollama.jar
          echo "JAR file deployed to /home/lsb/deployments/spring-ollama.jar"

      - name: Start the application on remote server
        run: |
          ssh lsb@${{ env.SERVER_HOST }} "nohup java -jar /home/lsb/deployments/spring-ollama.jar &"
          echo "Started the application remotely"

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to initialize..."
          sleep 30  # Give time for the app to start
          
          HEALTH_URL="http://${{ env.SERVER_HOST }}:8080/actuator/health"
          echo "Checking health endpoint at $HEALTH_URL"
          
          for (( i=1; i<=6; i++ )); do
            HEALTH_STATUS=$(curl -s -o health_response.txt -w "%{http_code}" "$HEALTH_URL" || echo "000")
          
            if [ "$HEALTH_STATUS" == "200" ]; then
              APP_STATUS=$(grep -o '"status":"[^"]*"' health_response.txt | cut -d'"' -f4)
          
              if [ "$APP_STATUS" == "UP" ]; then
                echo "✅ Application health check successful - Status: UP"
                rm health_response.txt
                exit 0
              else
                echo "⚠️ Application responded but status is not UP: $APP_STATUS"
              fi
            else
              echo "Health check returned HTTP $HEALTH_STATUS (Attempt $i/6), retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "::warning::Health check failed after multiple attempts"
          echo "success=false" >> $GITHUB_OUTPUT

      - name: Send success notification
        if: success()
        run: |
          export TZ="Asia/Phnom_Penh"
          BRANCH=${GITHUB_REF#refs/heads/}
          DEPLOY_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          APP_URL="http://${{ env.SERVER_HOST }}:8080/swagger-ui/index.html#"
          BUILD_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          MESSAGE="✅ *LLAMA DEPLOYMENT SUCCESSFUL*%0A%0A"
          MESSAGE+="*Branch:* \`${BRANCH}\`%0A"
          MESSAGE+="*Deployed at:* ${DEPLOY_TIME}%0A"
          MESSAGE+="*Application URL:* [Open App](${APP_URL})%0A"
          MESSAGE+="*Build Details:* [View Log](${BUILD_URL})%0A%0A"
          MESSAGE+="✨ _Deployment completed successfully!_"

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
               -d "chat_id=${TELEGRAM_CHAT_ID}" \
               -d "text=${MESSAGE}" \
               -d "parse_mode=Markdown" \
               -d "disable_web_page_preview=true"

  cleanup:
    runs-on: self-hosted
    needs: build-and-deploy
    if: always()

    steps:
      - name: Cleanup old backups
        run: |
          BACKUP_COUNT=$(ls -1 $BACKUP_DIR/${APP_NAME}_backup_*.jar 2>/dev/null | wc -l)
          
          if [ "$BACKUP_COUNT" -gt "$MAX_BACKUPS" ]; then
            REMOVE_COUNT=$((BACKUP_COUNT - MAX_BACKUPS))
            ls -1t $BACKUP_DIR/${APP_NAME}_backup_*.jar | tail -n $REMOVE_COUNT | xargs rm -f
            echo "Removed $REMOVE_COUNT old backup(s), keeping the $MAX_BACKUPS most recent"
          else
            echo "Found $BACKUP_COUNT backup(s), no cleanup needed (keeping max $MAX_BACKUPS)"
          fi

      - name: Clean build artifacts
        run: |
          find $GITHUB_WORKSPACE -name "*.jar" -delete || true
          ./gradlew clean || true
          echo "Cleaned up build artifacts"
