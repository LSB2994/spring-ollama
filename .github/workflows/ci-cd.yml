name: LLAMA CI/CD Pipeline

on:
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'

env:
  JAVA_VERSION:       '21'
  APP_NAME:          "spring-ollama"
  BACKUP_DIR:        "/home/kosign/backups/tomcat"
  MAX_BACKUPS:       5
  SERVER_HOST:       "172.27.184.67"
  TELEGRAM_TOKEN:    ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID:  ${{ secrets.TELEGRAM_TO }}

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Send deployment start notification
        shell: pwsh
        run: |
          $Branch      = $env:GITHUB_REF -replace 'refs/heads/', ''
          $CommitMsg   = (git log -1 --pretty=%B).Trim()
          $CommitAuthor= git log -1 --pretty=%an
          $BuildUrl    = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          $env:TZ      = "Asia/Phnom_Penh"

          $Message = @"
          üöÄ *HRMS DEPLOYMENT STARTED*%0A%0A
          *Branch:*   `$Branch`%0A
          *Commit:*   `$CommitMsg`%0A
          *Author:*   $CommitAuthor%0A
          *Build:*    [View Details]($BuildUrl)%0A
          *Started:*  $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')%0A%0A
          _Deployment in progress..._
          "@

          Invoke-RestMethod -Uri "https://api.telegram.org/bot$env:TELEGRAM_TOKEN/sendMessage" `
          -Method Post -Body @{
          chat_id                 = $env:TELEGRAM_CHAT_ID
          text                   = $Message
          parse_mode             = "Markdown"
          disable_web_page_preview= $true
          }

      - name: Set up environment
        shell: pwsh
        run: |
          $javaPath = if ($IsLinux) { "/usr/lib/java-$env:JAVA_VERSION-openjdk-amd64/bin/java" } 
                      else { "$env:JAVA_HOME\bin\java" }
          "JAVA_HOME=$javaPath"       | Out-File -FilePath $env:GITHUB_ENV -Append
          "TIMESTAMP=$(Get-Date -Format 'yyyyMMdd_HHmmss')" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$javaPath;$env:PATH"  | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Build application
        shell: pwsh
        run: |
          if ($IsLinux) {
              chmod +x ./gradlew
              ./gradlew build -x test
          } else {
              .\gradlew.bat build -x test
          }

      - name: Find JAR file
        id: find-jar
        shell: pwsh
        run: |
          $jarFile = Get-ChildItem -Path "$env:GITHUB_WORKSPACE/build/libs" -Filter "*.jar" -File | 
                     Select-Object -First 1
          if (-not $jarFile) {
              Write-Error "::error::No JAR file found in build/libs directory"
              exit 1
          }
          "jar_file=$($jarFile.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Found JAR file: $($jarFile.FullName)"

      - name: Create backup directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path $env:BACKUP_DIR | Out-Null
          Write-Host "Created backup directory at $env:BACKUP_DIR"

      - name: Backup existing deployment
        shell: pwsh
        run: |
          $sourcePath = "$env:BACKUP_DIR/$env:APP_NAME.jar"
          if (Test-Path $sourcePath) {
              $backupFile = "$env:BACKUP_DIR/${env:APP_NAME}_backup_$env:TIMESTAMP.jar"
              Copy-Item -Path $sourcePath -Destination $backupFile
              "backup_file=$backupFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "has_backup=true"          | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              Write-Host "Backed up current JAR to $backupFile"
          } else {
              "has_backup=false"         | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              Write-Host "No existing JAR file to backup"
          }

      - name: Deploy to Server (JAR)
        shell: pwsh
        run: |
          ssh lsb@$env:SERVER_HOST "mkdir -p /home/lsb/deployments"
          ssh lsb@$env:SERVER_HOST "pkill -f spring-ollama || true"
          scp ${{ steps.find-jar.outputs.jar_file }} lsb@$env:SERVER_HOST:/home/lsb/deployments/spring-ollama.jar
          Write-Host "JAR file deployed to /home/lsb/deployments/spring-ollama.jar"

      - name: Start the application on remote server
        shell: pwsh
        run: |
          ssh lsb@$env:SERVER_HOST "nohup java -jar /home/lsb/deployments/spring-ollama.jar > /dev/null 2>&1 &"
          Write-Host "Started the application remotely"

      - name: Verify deployment
        shell: pwsh
        run: |
          Write-Host "Waiting for deployment to initialize..."
          Start-Sleep -Seconds 30
          
          $healthUrl = "http://$env:SERVER_HOST:8080/actuator/health"
          $success   = $false
          
          for ($i = 1; $i -le 6; $i++) {
              try {
                  $response = Invoke-WebRequest -Uri $healthUrl -SkipCertificateCheck -ErrorAction Stop
                  if ($response.StatusCode -eq 200) {
                      $content = $response.Content | ConvertFrom-Json
                      if ($content.status -eq "UP") {
                          Write-Host "‚úÖ Application health check successful - Status: UP"
                          $success = $true
                          break
                      } else {
                          Write-Host "‚ö†Ô∏è Application responded but status is not UP: $($content.status)"
                      }
                  }
              } catch {
                  Write-Host "Health check returned HTTP $($_.Exception.Response.StatusCode.value__) (Attempt $i/6)"
              }
          
              if ($i -lt 6) {
                  Write-Host "Retrying in 10 seconds..."
                  Start-Sleep -Seconds 10
              }
          }
          
          if (-not $success) {
              Write-Host "::warning::Health check failed after multiple attempts"
              "success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
          }

      - name: Send success notification
        if: success()
        shell: pwsh
        run: |
          $env:TZ      = "Asia/Phnom_Penh"
          $branch      = $env:GITHUB_REF -replace 'refs/heads/', ''
          $deployTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
          $appUrl     = "http://$env:SERVER_HOST:8080/swagger-ui/index.html#"
          $buildUrl    = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          
            $message = @"
          ‚úÖ *LLAMA DEPLOYMENT SUCCESSFUL*%0A%0A
          *Branch:*   `$branch`%0A
          *Deployed:* $deployTime%0A
          *App URL:*  [Open App]($appUrl)%0A
          *Build:*    [View Log]($buildUrl)%0A%0A
          ‚ú® _Deployment completed successfully!_
          "@
        
                  Invoke-RestMethod -Uri "https://api.telegram.org/bot$env:TELEGRAM_TOKEN/sendMessage" `
          -Method Post -Body @{
          chat_id                 = $env:TELEGRAM_CHAT_ID
          text                   = $message
          parse_mode             = "Markdown"
          disable_web_page_preview= $true
          }

cleanup:
  runs-on: self-hosted
  needs: build-and-deploy
  if: always()

  steps:
    - name: Cleanup old backups
      shell: pwsh
      run: |
        $backups = Get-ChildItem -Path $env:BACKUP_DIR -Filter "${env:APP_NAME}_backup_*.jar" | 
                    Sort-Object LastWriteTime -Descending
        
        if ($backups.Count -gt $env:MAX_BACKUPS) {
            $toRemove = $backups.Count - $env:MAX_BACKUPS
            $backups | Select-Object -Last $toRemove | Remove-Item -Force
            Write-Host "Removed $toRemove old backup(s), keeping $env:MAX_BACKUPS most recent"
        } else {
            Write-Host "Found $($backups.Count) backup(s), no cleanup needed (max $env:MAX_BACKUPS)"
        }

    - name: Clean build artifacts
      shell: pwsh
      run: |
        Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "*.jar" -Recurse | 
          Remove-Item -Force -ErrorAction SilentlyContinue
        
        if ($IsLinux) {
            ./gradlew clean
        } else {
            .\gradlew.bat clean
        }
        Write-Host "Cleaned up build artifacts"